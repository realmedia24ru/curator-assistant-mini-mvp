from typing import List

# Системный промпт и подсказки для LLM
SYSTEM_PROMPT = (
    "Ты — куратор онлайн-программы по современному искусству. Отвечай кратко, дружелюбно, конкретно. "
    "Если вопрос организационный — предлагай короткие шаги. Не обещай возвраты/сроки. "
    "Сгенерируй РОВНО 3 варианта: 1) Коротко по делу; 2) Эмпатия + шаги; 3) Ссылочный (плейсхолдеры <правила>, <анкета>, <вводная>, <база_защит>). "
    'Выведи JSON-список строк: ["...","...","..."].'
)

COURSE_HINTS = (
    "Правила чата: <правила>; Анкета: <анкета>; Вводная лекция: <вводная>; Платформа: onstudy.org; База защит: <база_защит>."
)

# Автозамена плейсхолдеров на реальные ссылки
LINKS = {
    "<правила>": "https://t.me/c/2471800961/20",
    "<анкета>": "https://forms.gle/mUYXTjswVtxWVpvJA",
    "<вводная>": "https://t.me/c/2471800961/1737",
    "<база_защит>": "https://onstudy.org/courses/baza-zaschit-hudozhnikov-2-0/",
}

def expand_links(txt: str) -> str:
    for k, v in LINKS.items():
        txt = txt.replace(k, v)
    return txt

# «Умный фолбэк» без LLM — разные ответы по ключевым словам
def rule_suggestions(user_text: str) -> List[str]:
    t = (user_text or "").lower()

    def S(a, b, c):
        return [a, b, c]

    # старт / вводная
    if any(k in t for k in ["вводн", "начать", "старт", "как начать"]):
        return S(
            "Начните с вводной лекции: <вводная>.",
            "Шаги на старт: 1) вводная <вводная>, 2) анкета <анкета>, 3) коротко #ТочкаА.",
            "Если нужно, пришлю ссылки и мини-чек-лист на первый месяц."
        )

    # анкета
    if any(k in t for k in ["анкета", "форма", "заполнить анкет"]):
        return S(
            "Анкета участника: <анкета> (3–5 минут).",
            "Отправляю ссылку на анкету: <анкета>. Если не откроется — напишите.",
            "После анкеты посмотрите вводную <вводная> и напишите #ТочкаА."
        )

    # правила
    if any(k in t for k in ["правил", "регламент", "что можно", "оффтоп"]):
        return S(
            "Правила чата тут: <правила>.",
            "Коротко: по делу и по программе; сторонние услуги/сборы — вне рабочего чата. Полная версия: <правила>.",
            "Если сомневаетесь, можно написать куратору в личку. Ссылка на правила: <правила>."
        )

    # график/встречи
    if any(k in t for k in ["встреч", "знакомств", "расписан", "график", "зум"]):
        return S(
            "Ближайшие встречи — в закрепе/анонсе чата; если нужно — пришлю ссылку.",
            "На встрече можно кратко представить себя (5–7 мин). Записи прикладываем в чат.",
            "Если по времени не выходит — будут записи; приходите в следующий раз."
        )

    # вопросы по лекциям / боту Маше
    if any(k in t for k in ["вопрос", "лекци", "материал", "понять", "разобраться"]):
        return S(
            "Вопросы по лекциям — в бота Маше (ссылка в закрепе). Ответим точечно.",
            "Опишите, к какой лекции вопрос, что именно не ясно — передам Маше.",
            "Можем созвониться на встрече «вопрос-ответ»; параллельно пишите в бота Маше."
        )

    # база защит / пакет документов
    if any(k in t for k in ["база защит", "защит", "пакет документ", "портфолио"]):
        return S(
            "База защит прошлых потоков: <база_защит>. Рекомендую 10–15 перед своей.",
            "Сначала черновик пакета, затем смотрим защиты по похожим практикам: <база_защит>.",
            "Готов черновик? Присылайте — дадим прицельную обратную связь."
        )

    # запись на защиту
    if any(k in t for k in ["записать", "слот", "таблиц", "расписани", "когда защита"]):
        return S(
            "Запись на защиту — в таблице (из закрепа). Лучше занять слот заранее.",
            "Записаться можно не позднее чем за 10 дней до даты. Ссылку дам при необходимости.",
            "Готовность проверим заранее: пакет + ссылка в таблице минимум за 3 дня."
        )

    # аттестация / свидетельство
    if any(k in t for k in ["аттест", "свидетельств", "документ об образован"]):
        return S(
            "Инструкция по аттестации — в документе (из закрепа). Проверьте себя по чек-листу.",
            "Чтобы выдать документ, нужно пройти все обязательные пункты. Проверим вместе.",
            "Если что-то не добрали, подскажем, как закрыть быстро."
        )

    # продление
    if any(k in t for k in ["продлен", "продлить", "ещё 6 месяц"]):
        return S(
            "Да, продление на 6 месяцев доступно. Сообщим новые сроки и доступы.",
            "После продления доступ к обратной связи и защите обновится; лекции на платформе — до конца срока.",
            "Подскажу, как оформить продление и когда появятся новые слоты."
        )

    # модерация/оффтоп/реклама
    if any(k in t for k in ["реклам", "донат", "сбор", "сторонн", "оффтоп"]):
        return S(
            "В рабочем чате держимся в теме программы; сторонние сборы — вне чата.",
            "Такие сообщения будем удалять по правилам: <правила>.",
            "Если нужно обсудить стороннее — делайте это в личке по взаимному согласию."
        )

    # платформа/onstudy
    if any(k in t for k in ["onstudy", "платформ", "логин", "доступ"]):
        return S(
            "Все лекции — на платформе onstudy.org. Если не видите курс — скажите, проверим доступ.",
            "Зайдите на onstudy.org под своим логином. Дальше распределите просмотр по неделям.",
            "Если что-то не открывается — пришлите скрин; разберёмся."
        )

    # книга / чтение
    if any(k in t for k in ["книга", "читать", "1900"]):
        return S(
            "Параллельно читаем «Искусство с 1900 года».",
            "Можно читать выборочно — по блокам, которые совпадают с лекциями.",
            "Если нужна шпаргалка по главам — подскажу."
        )

    # по умолчанию
    return S(
        "Подскажите, к какому модулю относится вопрос? Помогу быстро сориентироваться.",
        "Давайте по шагам: 1) вводная <вводная>, 2) анкета <анкета>, 3) #ТочкаА. Если нужно — пришлю ссылки.",
        "Полезное по чату: <правила>, <анкета>, <вводная>, <база_защит>. С чего начнём?"
    )
